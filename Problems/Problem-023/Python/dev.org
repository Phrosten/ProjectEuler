#+OPTIONS: toc:nil

* Non-abundant sums

** Task

A perfect number is a number for which the sum of its proper divisors is exactly
equal to the number. For example, the sum of the proper divisors of 28 would be
1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.

A number n is called deficient if the sum of its proper divisors is less than n
and it is called abundant if this sum exceeds n.

As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest
number that can be written as the sum of two abundant numbers is 24.
By mathematical analysis, it can be shown that all integers greater than
28123 can be written as the sum of two abundant numbers. However, this upper
limit cannot be reduced any further by analysis even though it is known that
the greatest number that cannot be expressed as the sum of two abundant numbers
is less than this limit.

Find the sum of all the positive integers which cannot be written as the sum of
two abundant numbers.

** Solution

#+BEGIN_SRC python :results output :exports both
import math

def get_proper_divisors(n):
    divisors = []
    for i in range(1, math.floor(math.sqrt(n)) + 1):
        if n % i == 0:
            if i * i != n and i != 1:
                divisors.append(i)
                divisors.append(int(n / i))
            else:
                divisors.append(i)
    return sorted(divisors)

def is_abundant_number(n):
    return sum(get_proper_divisors(n)) > n

LIMIT = 28123 + 1

abundant_numbers = set()
for i in range(1, LIMIT):
    if is_abundant_number(i):
        abundant_numbers.add(i)

total = 0
for number in range(1, LIMIT):
    non_abundant_sum = True
    for summand in abundant_numbers:
        if summand > number:
            break
        if (number - summand) in abundant_numbers:
            non_abundant_sum = False
            break

    if non_abundant_sum:
        total += number

print(total)
#+END_SRC

#+RESULTS:
: 4179871
