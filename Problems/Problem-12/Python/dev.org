#+OPTIONS: toc:nil

* Highly divisible triangle number

** Task

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?

** Solution

#+BEGIN_SRC python :results output :exports both
import math

def divisor_count(n):
    count = 0
    for i in range(1, math.floor(math.sqrt(n)) + 1):
        if n % i == 0:
            if i * i != n:
                count += 2
            else:
                count += 1
    return count

# Init the variables
triangle_number = 1
natural_number = 2

while divisor_count(triangle_number) < 500:
    triangle_number += natural_number
    natural_number += 1

print(triangle_number)
#+END_SRC

#+RESULTS:
: 76576500
