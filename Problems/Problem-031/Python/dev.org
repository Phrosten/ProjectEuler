#+OPTIONS: toc:nil

* Coin sums

** Task



In England the currency is made up of pound, £, and pence, p, and there are
 eight coins in general circulation:

    1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).

It is possible to make £2 in the following way:

    1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p

How many different ways can £2 be made using any number of coins?


** Solution

This solution uses a dirty metaprogramming hack with exec. This is my first
time trying it, and I realize that it is not elegant nor maintainable.

In PyPy, it actually takes just 200ms to execute.

#+BEGIN_SRC python :results output :exports both
COINS = [1, 2, 5, 10, 20, 50, 100, 200]
AMOUNT = 200

def get_char(index):
    return chr(ord('a') + index)

def create_loop_boundry(index):
    s = "int((" + str(AMOUNT)
    for i in range(0, index):
        s += " - {} * {}".format(get_char(i), COINS[i])

    s += ") / {} + 1)".format(COINS[index])
    return s

def create_loop(index):
    s = index * "    "
    s += "for {} in range(0, {}):\n".format(
        get_char(index),
        create_loop_boundry(index)
    )
    return s

def create_if():
    s = len(COINS) * "    "
    s += "if "
    for index in range(0, len(COINS)):
        s += "{} * {}".format(get_char(index), COINS[index])
        if index < len(COINS) - 1:
            s += " + "
    s += " == {}:\n".format(AMOUNT)
    s += len(COINS) * "    "
    s += "    count += 1\n"
    return s

meta = "count = 0\n"

for index in range(0, len(COINS)):
    meta += create_loop(index)
meta += create_if()
meta += "print(count)"

exec(meta)
#+END_SRC

#+RESULTS:
: 73682
