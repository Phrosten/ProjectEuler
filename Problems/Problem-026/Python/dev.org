#+OPTIONS: toc:nil

* Reciprocal cycles

** Task

A unit fraction contains 1 in the numerator. The decimal representation of the
unit fractions with denominators 2 to 10 are given:

    1/2	= 	0.5
    1/3	= 	0.(3)
    1/4	= 	0.25
    1/5	= 	0.2
    1/6	= 	0.1(6)
    1/7	= 	0.(142857)
    1/8	= 	0.125
    1/9	= 	0.(1)
    1/10	= 	0.1

Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be
 seen that 1/7 has a 6-digit recurring cycle.

Find the value of d < 1000 for which 1/d contains the longest recurring cycle in
 its decimal fraction part.

** Solution

#+BEGIN_SRC python :results output :exports both
def cycle_length(n):
    curr_number = 1
    numbers = []

    while True:
        if curr_number in numbers:
            return len(numbers) - numbers.index(curr_number)

        numbers.append(curr_number)
        if curr_number / n < 1:
            curr_number *= 10
            continue

        curr_number = (curr_number - (int(curr_number / n) * n)) * 10
        if curr_number == 0:
            return 0

max_denominator = 2
max_denominator_length = 0
for i in range(2, 1000):
    length = cycle_length(i)
    if length > max_denominator_length:
        max_denominator = i
        max_denominator_length = length
print(max_denominator)
#+END_SRC

#+RESULTS:
: 983
