#+OPTIONS: toc:nil

* Quadratic primes

** Task

Euler discovered the remarkable quadratic formula:

n^2+n+41

It turns out that the formula will produce 40 primes for the consecutive integer
values 0≤n≤39. However, when n=40,40^2+40+41=40(40+1)+41 is divisible by 41, and
certainly when n=41,41^2+41+41

is clearly divisible by 41.

The incredible formula n^2−79n+1601
was discovered, which produces 80 primes for the consecutive values 0≤n≤79

. The product of the coefficients, −79 and 1601, is −126479.

Considering quadratics of the form:

    n2+an+b

, where |a|<1000 and |b|≤1000

where |n|
is the modulus/absolute value of n
e.g. |11|=11 and |−4|=4

Find the product of the coefficients, a
and b, for the quadratic expression that produces the maximum number of primes
for consecutive values of n, starting with n=0.

** Solution

#+BEGIN_SRC python :results output :exports both
import math

primes = set()


def is_prime(n):
    if n in primes or n == 2:
        return True
    if n < 2:
        return False

    for i in range(2, math.ceil(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    primes.add(n)
    return True


def prime_sequence_length(a, b):
    n = 0
    while is_prime(math.pow(n, 2) + a * n + b):
        n += 1
    return n


b_prime_set = set()
for b in range(-1000, 1001):
    if is_prime(b):
        b_prime_set.add(b)

max_s_length = 0
max_s_length_product = 0
for a in range(-1000, 1001):
    for b in b_prime_set:
        s_length = prime_sequence_length(a, b)
        if s_length > max_s_length:
            max_s_length = s_length
            max_s_length_product = a * b
print(max_s_length_product)
#+END_SRC

#+RESULTS:
: -59231
